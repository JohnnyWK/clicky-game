{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","onClick","click","id","shuffle","alt","name","src","image","Wrapper","children","currentScore","highScore","styles","navbarStyle","background","color","width","height","navElements","justifyContent","fontSize","head","textAlign","headtext","marginLeft","alignItems","h1text","Header","style","App","state","friends","removeFriend","filter","friend","setState","clicker","map","clicked","console","log","alert","gameOver","sort","a","b","Math","random","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0vEAkBeA,MAZf,SAAoBC,GAElB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBAAgBC,QAAS,WAAOF,EAAMG,MAAMH,EAAMI,IAAKJ,EAAMK,YAC1E,yBAAKC,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,W,MCJ1BC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,OCErCC,EAAe,EACfC,EAAY,EAEVC,EAAS,CACbC,YAAa,CACTC,WAAY,QACZC,MAAO,QACPC,MAAO,OACPC,OAAQ,OAEZC,YAAa,CACXC,eAAgB,SAChBH,MAAO,OACPI,SAAU,QAEZC,KAAM,CACJP,WAAY,QACZE,MAAO,OACPC,OAAQ,MACRF,MAAO,QACPO,UAAW,UAEbC,SAAU,CAERC,WAAY,MAEZC,WAAY,SACZH,UAAW,UAEbI,OAAQ,CACNJ,UAAW,WAIf,SAASK,IACP,OACI,yBAAKC,MAAOhB,EAAOS,MACf,wBAAIO,MAAOhB,EAAOW,UAAlB,2F,IAkGKM,E,2MA3FbC,MAAQ,CACNC,W,EAGFC,aAAe,SAAA9B,GAEb,IAAM6B,EAAU,EAAKD,MAAMC,QAAQE,QAAO,SAAAC,GAAM,OAAIA,EAAOhC,KAAOA,KAElE,EAAKiC,SAAS,CAAEJ,a,EAIlBK,QAAU,SAAClC,GACT,IAAM6B,EAAU,EAAKD,MAAMC,QAAQM,KAAI,SAAAH,GAkBrC,OAjBIA,EAAOhC,KAAOA,IAAyB,IAAnBgC,EAAOI,SAC7BJ,EAAOI,SAAU,EACjB5B,IACA6B,QAAQC,IAAIN,IAELA,EAAOhC,KAAOA,IAAyB,IAAnBgC,EAAOI,UAClCG,MAAM,iBACF/B,EAAeC,IACjBA,EAAYD,GAEd,EAAKgC,YAEc,KAAjBhC,IACF+B,MAAM,cACN9B,EAAY,GACZ,EAAK+B,YAEAR,KAETK,QAAQC,IAAI,WACZD,QAAQC,IAAIT,GACZ,EAAKI,SAAS,CAAEJ,a,EAGlB5B,QAAU,WACR,EAAKgC,SAAS,CACZJ,QAAS,EAAKD,MAAMC,QAAQY,MAAK,SAAUC,EAAGC,GAC5C,MAAO,GAAMC,KAAKC,e,EAMxBL,SAAW,WACT,IAAMX,EAAU,EAAKD,MAAMC,QAAQM,KAAI,SAAAH,GAErC,OADAA,EAAOI,SAAU,EACVJ,KAETxB,EAAe,EACf,EAAKyB,SAAS,CAAEJ,a,wEAGR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,yBAAKhC,UAAU,MAAM6B,MAAOhB,EAAOC,aACjC,yBAAKd,UAAU,SAAU6B,MAAOhB,EAAOM,aACrC,yBAAKnB,UAAU,YACb,wBAAI6B,MAAOhB,EAAOc,QAAlB,gBAEF,yBAAK3B,UAAU,YACb,qCAAWW,EAAX,kBAAwCC,MAI9C,kBAACgB,EAAD,MAEEqB,KAAKlB,MAAMC,QAAQM,KAAI,SAACH,GACtB,OACE,kBAAC,EAAD,CACEe,IAAKf,EAAOhC,GACZG,KAAM6B,EAAO7B,KACbE,MAAO2B,EAAO3B,MACdN,MAAO,EAAKmC,QACZE,QAASJ,EAAOI,QAChBnC,QAAS,EAAKA,QACdD,GAAIgC,EAAOhC,a,GAlFTgD,aCpCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4702e059.chunk.js","sourcesContent":["  \nimport React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction FriendCard(props) {\n  // console.log(props)\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" onClick={() => {props.click(props.id); props.shuffle()}}>\n        <img alt={props.name} src={props.image} />\n      </div>\n      {/* <span className=\"remove\" >ùòÖ</span> */}\n    </div>\n  );\n}\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\n// import Header from \"./components/Header/Header\";\nimport friends from \"./friends.json\";\n\nlet currentScore = 0;\nlet highScore = 0;\n\nconst styles = {\n  navbarStyle: {\n      background: \"black\",\n      color: \"white\",\n      width: \"100%\",\n      height: \"20%\"\n  },\n  navElements: {\n    justifyContent: \"center\",\n    width: \"100%\",\n    fontSize: \"36px\"\n  },\n  head: {\n    background: \"black\",\n    width: \"100%\",\n    height: \"12%\",\n    color: \"white\",\n    textAlign: \"center\"\n},\n  headtext: {\n    // marginRight: \"10%\",\n    marginLeft: \"10%\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n},\n  h1text: {\n    textAlign: \"center\"\n  }\n};\n\nfunction Header() {\n  return (\n      <div style={styles.head}>\n          <h3 style={styles.headtext}>To begin, click on a picture.  If you click the same picture more than once, YOU LOSE!</h3>\n      </div>\n  );\n}\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const friends = this.state.friends.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  clicker = (id) => {\n    const friends = this.state.friends.map(friend => {\n      if (friend.id === id && friend.clicked === false) {\n        friend.clicked = true;\n        currentScore++\n        console.log(friend)\n      }\n      else if (friend.id === id && friend.clicked === true) {\n        alert(\"You blew it!!\")\n        if (currentScore > highScore) {\n          highScore = currentScore\n        }\n        this.gameOver()\n      }\n      if (currentScore === 12) {\n        alert(\"You Win!!!\")\n        highScore = 12\n        this.gameOver()\n      }\n      return friend\n    })\n    console.log(\"clicked\")\n    console.log(friends)\n    this.setState({ friends })\n  }\n\n  shuffle = () => {\n    this.setState({\n      friends: this.state.friends.sort(function (a, b) {\n        return 0.5 - Math.random();\n      }\n      )\n    })\n  }\n\n  gameOver = () => {\n    const friends = this.state.friends.map(friend => {\n      friend.clicked = false;\n      return friend\n    })\n    currentScore = 0;\n    this.setState({ friends })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <div className=\"row\" style={styles.navbarStyle}>\n          <nav className=\"navbar\"  style={styles.navElements}>\n            <div className=\"col-md-4\">\n              <h1 style={styles.h1text}>Clicky Game</h1>\n            </div>\n            <div className=\"col-md-4\">\n              <p>score: {currentScore} | high score: {highScore}</p>\n            </div>\n          </nav>\n        </div>\n        <Header />\n        {\n          this.state.friends.map((friend) => {\n            return (\n              <FriendCard\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                click={this.clicker}\n                clicked={friend.clicked}\n                shuffle={this.shuffle}\n                id={friend.id}\n              />\n            )\n          })\n        }\n\n      </Wrapper >\n    );\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}